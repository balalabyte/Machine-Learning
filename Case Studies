# -*- coding: utf-8 -*-
"""Uber Case Study.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EL3pN6dxR3q56lR84hvvm0nbgkCO2OxP
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from  scipy.stats import ttest_ind
import seaborn as sns

file_path_data_dic='/content/drive/MyDrive/Colab Notebooks/MSCI 719/Datasets/Case-Data 3 Data Dictionary (CSV).csv'
data_dic=pd.read_csv(file_path_data_dic)
data_dic.iloc[:,0:3:2]

file_path='/content/drive/MyDrive/Colab Notebooks/MSCI 719/Datasets/Case-Data 3-Switch backs (CSV).csv'

df= pd.read_csv(file_path)
df.head()

"""# 1 Commute versus non-commute hours
###1. Do the commuting hours experience a higher number of ride-sharing trips? Is the difference statistically significant? What about the rate of using each ride-share service? (15%)

"""

mean_non_commute= df[df['commute']==False][['trips_pool','trips_express']].sum(axis=1).mean()
mean_commute=     df[df['commute']==True ][['trips_pool','trips_express']].sum(axis=1).mean()

non_commute= df[df['commute']==False][['trips_pool','trips_express']].sum(axis=1)
commute=     df[df['commute']==True ][['trips_pool','trips_express']].sum(axis=1)

non_commute

t_test, p_value= ttest_ind(non_commute, commute)
t_test, p_value, mean_commute, mean_non_commute

pool_commute= df[df['commute']==True] ['trips_pool'].sum()
pool_non_commute= df[df['commute']==False] ['trips_pool'].sum()

express_commute= df[df['commute']==True] ['trips_express'].sum()
express_non_commute= df[df['commute']==False] ['trips_express'].sum()

total_trips_commute=  express_commute+ pool_commute
total_trips_non_commute= pool_non_commute +express_non_commute

pool_rate_commute=  pool_commute/total_trips_commute
express_rate_commute= express_commute/ total_trips_commute

df['total_trips']=df['trips_pool']+ df['trips_express']

pool=df[df['commute']==True] ['trips_pool']/df[df['commute']==True] ['total_trips']
express= df[df['commute']==True] ['trips_express']/df[df['commute']==True] ['total_trips']

t_test, p_value= ttest_ind(pool,express)

t_test, p_value, pool_rate_commute, express_rate_commute

mean_pool= (df['trips_pool'].sum())/(df['total_trips'].sum())
mean_express= (df['trips_express'].sum())/(df['total_trips'].sum())

df['total_trips']= df[['trips_pool','trips_express']].sum(axis=1)
df['total_trips']
df['pool_rate']=df['trips_pool']/df['total_trips']
df['express_rate']=df['trips_express']/df['total_trips']

t_test, p_value= ttest_ind(df['pool_rate'],df['express_rate'])

t_test ,p_value, mean_pool ,mean_express

"""In general, the rate of using Uber-express service is more than Uber-pool service irrespective of it being the rush hour or not.
This is statistically significant, as we performed the two sample t-test. The p-value is significantly less than 0.05 proving that our results and conclusions are statistically significant and not by random chance.

### 2. Assume on average riders pay around 12.5 dollars for a POOL ride and 10.5 on an Express ride. What is the difference in Uberâ€™s profit in a typical hour of commuting and non-commuting? Is the difference statistically significant? (15%)
"""

#filtering data
profit_commute= df[df['commute']==True]['trips_pool']* 12.5 + df[df['commute']==True]['trips_express']* 10.5 - df[df['commute']==True]['total_driver_payout']
profit_non_commute=df[df['commute']==False] ['trips_pool']* 12.5 + df[df['commute']==False]['trips_express']* 10.5 - df[df['commute']==False]['total_driver_payout']

t_test, p_value= ttest_ind(profit_commute, profit_non_commute)

t_test, p_value, profit_non_commute.mean(), profit_commute.mean()

"""###4. Using the kernel density estimation method with a suitable choice of bandwidth, estimate the distribution of cancellations rate in non-commuting and commuting hours. Do you observe a difference? How could you explain the difference? (15%)"""

df.head()

df['cancellation_rate']= df['rider_cancellations']/ df['total_trips']
commute=df[df['commute']==True]['cancellation_rate']
non_commute=df[df['commute']==False]['cancellation_rate']

sns.kdeplot(non_commute, bw_adjust=5, label='Non-Commuting Hours', shade=True)
sns.kdeplot(commute, bw_adjust=5, label='Commuting Hours', shade=True)

plt.xlabel('Cancellation Rate')
plt.ylabel('Density')
plt.title('Kernel Density Estimation of Cancellation Rates')
plt.legend()
plt.show()

"""# 2 Waiting times and commuting versus non-commuting hours
### 1. What is the difference in the number of ridesharing trips between the treatment and control groups during commuting hours? Is the difference statistically significant? What about rider cancellation and payouts? (20%)

"""

#treat_commute = df[df.commute & df.treat]
treat_commute=df[(df['commute']==True) & (df['treat']==True)]
control_commute= df[(df['commute']==True) & (df['treat']==False)]

if treat_commute['total_trips'].sum() > control_commute['total_trips'].sum():
  print("Treatment group has more trips compared to Control group during commute hours")
else:
  print("Control group has more trips compared to Treatment group during commute hours")

treat_commute_total_trips=treat_commute['total_trips'].sum()
control_commute_total_trips=control_commute['total_trips'].sum()


difference=abs( treat_commute['total_trips'].sum()-control_commute['total_trips'].sum())
difference

"""This implies that people are ready to wait for more time and during commute hours, which seems counterintuitive. Let's see if this difference is statistically significant using two-sample t-tests."""

t_test , p_value= ttest_ind(treat_commute['total_trips'],control_commute['total_trips'])
t_test, p_value, treat_commute_total_trips, control_commute_total_trips

"""p-value is greater than 0.05 which suggests that the difference is not statistically significant. So we can not accept the fact that more number of trips with the control group during commute hours implies that people prefer to wait longer.

### Now, for rider cancellation rates and payouts:
"""

mean_treat_cancel= treat_commute['cancellation_rate'].mean()
mean_control_cancel= control_commute['cancellation_rate'].mean()

print("Mean values of cancellation rates: ")
print("Control group cancellation rate mean : ",mean_control_cancel)
print("Treat group cancellation rate mean   : ",mean_treat_cancel)
print("Differnece: ",mean_treat_cancel-mean_control_cancel )


mean_treat_payout= treat_commute['total_driver_payout'].mean()
mean_control_payout= control_commute['total_driver_payout'].mean()

print("\nMean values of driver payout rates: ")
print("Control group driver payout rates mean : ",mean_control_payout)
print("Treat group driver payout rates mean   : ", mean_treat_payout)
print("Differnece: ",mean_control_payout -mean_control_payout)

"""We see that average cancellation rate is higher for Treatment group than the control group.

This implies passengers tend to cancel more when the waiting time is increased from 2 mintues to 5 minutes.

We can aslo see that the average driver payout is higher for the control group that is when the waiting time is 2 minutes. Let's check the statistical significance of these results.
"""

t_test, p_value= ttest_ind(treat_commute['cancellation_rate'],control_commute['cancellation_rate'] )
t_test, p_value, mean_control_cancel, mean_treat_cancel

"""The p-value is less than 0.05 and this suggests that difference in the rider cancellations between the treatment groups and control groups is statistically significant."""

t_test, p_value= ttest_ind(treat_commute['total_driver_payout'],control_commute['total_driver_payout'] )
t_test, p_value, mean_control_payout, mean_treat_payout

"""The p-value is greater than 0.05 and this suggests that difference in the driver payouts between the treatment groups and control groups is not statistically significant."""

pip install dash dash-renderer dash-html-components dash-core-components plotly

import dash
from dash import html, dcc, Input, Output
import plotly.express as px
import pandas as pd

# Load your dataset

# Initialize the Dash app
app = dash.Dash(__name__)

# Set up the app layout
app.layout = html.Div([
    dcc.Dropdown(
        id='time_filter',
        options=[
            {'label': 'Commuting Hours', 'value': 'commute'},
            {'label': 'Non-Commuting Hours', 'value': 'non_commute'}
        ],
        value='commute'
    ),
    dcc.Graph(id='trip_histogram')
])

# Callback to update histogram based on selected filter
@app.callback(
    Output('trip_histogram', 'figure'),
    [Input('time_filter', 'value')]
)
def update_graph(selected_filter):
    filtered_df = df[df['commute'] == True]  # Assuming you have a commute label in your DataFrame
    fig = px.histogram(filtered_df,x='trips')  # Replace 'trips' with the relevant column name
    return fig

# Run the app
if __name__ == '__main__':
    app.run_server(debug=True)O
